#!/usr/bin/python
from __future__ import print_function
import datetime
from git import Repo
import json
import os
import re
import requests
import sys


config = json.loads(sys.stdin.readline())            # parse stdin source and param configuration
headers = {"Authorization": "token {}".format(config["source"]["access_token"])}
gh_api_url = "https://api.github.com"

repo = Repo("/tmp/build/put/{}".format(config["params"]["resource"]))
commit_info = [(config["params"]["repo_name"], repo.commit().hexsha)]     # init with main repo

for submod in repo.iter_submodules():
    # filter: only set status if we manage the submodules
    if submod.url.startswith("git@github.com:shield-ai/"):
        repo_name = re.search("git@github.com:(.*).git", submod.url).group(1)
        endpoint = os.path.join(gh_api_url, "repos", repo_name, "pulls")
        # "https://api.github.com/repos/{}/pulls".format(repo_name)
        params = {"state": "open"}
        pr_res = json.loads(requests.get(endpoint, headers=headers, params=params).text)

        # filter: sha is at the head of a PR in the submodule
        for pr_info in pr_res:
            if pr_info["head"]["sha"] == submod.hexsha:
                commit_info.append((repo_name, submod.hexsha))
                break

# build and execute a github api call for each submodule's HEAD commit
for repo_name, sha in commit_info:
    endpoint = os.path.join(gh_api_url, "repos", repo_name, "statuses", sha)
    target_url = ("http://ci.shield.ai:8080/teams/main/pipelines/{}/jobs/{}/builds/{}"
                  .format(os.environ["BUILD_PIPELINE_NAME"],
                          os.environ["BUILD_JOB_NAME"],
                          os.environ["BUILD_NAME"]))
    payload = {"context": config["params"]["context"],
               "description": config["params"]["description"],
               "state": config["params"]["state"],
               "target_url": target_url}
    status_res = requests.post(endpoint, headers=headers, json=payload)
    if status_res.status_code == 404:
        print("skipping {}".format(repo_name), file=sys.stderr)
        continue
    elif status_res.status_code != requests.codes.created:
        print("status POST request for repo:{} sha:{} failed with code {}"
              .format(repo_name, sha, status_res.status_code), file=sys.stderr)
        print(status_res.text, file=sys.stderr)
        sys.exit(1)

    # add PR comment if parameter was provided
    if "comment" in config["params"].keys():
        comment_str = ""
        with open(os.path.join("/tmp/build/put", config["params"]["comment"]), "r") as f:
           comment_str = f.read()
        endpoint = os.path.join(gh_api_url, "repos", repo_name, "commits", sha, "comments")
        payload = {"body": comment_str}
        print("commenting on {}".format(repo_name), file=sys.stderr)
        comment_res = requests.post(endpoint, headers=headers, json=payload)
        if status_res.status_code != requests.codes.created:
            print("comment POST request for repo:{} sha:{} failed with code {}"
                  .format(repo_name, sha, comment_res.status_code), file=sys.stderr)
            print(comment_res.text, file=sys.stderr)
            sys.exit(1)

# output ref on stdout for concourse
print(json.dumps({"version": {"ref": str(datetime.datetime.now())}}))
