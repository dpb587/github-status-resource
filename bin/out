#!/bin/bash

. $( dirname "$0" )/common.sh

repipe
load_source

set -x

eval $( jq -r '{
  "params_file": .params.config_path
} | to_entries[] | .key + "=" + @sh "\(.value)"' < /tmp/stdin )


while read line; do
  IFS=";" read -r -a line_arr <<< $line
  repo=${line_arr[0]}
  branch=${line_arr[1]}
  commit_hash=${line_arr[2]}
  context=${line_arr[3]}
  description=${line_arr[4]}
  state=${line_arr[5]}
  target_url=$( echo "${line_arr[6]}" | buildtpl )

  # execute
  jq -c -n \
    --arg state "$state" \
    --arg target_url "$target_url" \
    --arg description "$description" \
    --arg context "$context" \
    '{
      "context": $context,
      "description": $description,
      "state": $state,
      "target_url": $target_url
    } | to_entries | map( select( 0 < ( .value | length ) ) ) | from_entries' \
      | curlgh -d@- "$source_endpoint/repos/$repo/statuses/$commit_hash" \
      > /tmp/gh-result

  
  REMAINING_TRIES=5
  while [[ $REMAINING_TRIES -gt 0 ]]; do

    # lookup
    curlgh "$source_endpoint/repos/$repo/commits/$branch/status" \
      | jq -c \
        --arg ref "$(jq -r '.id | tostring' < /tmp/gh-result)" \
        '{
          "sha": .sha,
          "status": ( .statuses | map(select( $ref == ( .id | tostring ) )) | .[0] )
        }' \
        > /tmp/status

    # assert
    [[ -s /tmp/status ]] \
      && jq -e '.status' < /tmp/status > /dev/null \
      && break
    
    REMAINING_TRIES=$(($REMAINING_TRIES - 1))
    sleep 1 
  done

done < "$params_file"

# concourse
jq -c \
  --arg ref "$(date +%s)" \
  '{
    "version": {
      "ref": $ref
    },
    "metadata": [
      {
        "name": "created_at",
        "value": .created_at
      },
      {
        "name": "created_by",
        "value": .creator.login
      }
    ]
  }' \
    < /tmp/gh-result \
    >&3
